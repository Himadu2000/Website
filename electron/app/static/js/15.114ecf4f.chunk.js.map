{"version":3,"sources":["../node_modules/@ionic/core/dist/esm/legacy/ion-action-sheet-controller_7.entry.js"],"names":["__webpack_require__","r","__webpack_exports__","d","ActionSheetController","AlertController","LoadingController","ModalController","PickerController","PopoverController","ToastController","tslib__WEBPACK_IMPORTED_MODULE_0__","_chunk_f257aad1_js__WEBPACK_IMPORTED_MODULE_1__","_chunk_24212d31_js__WEBPACK_IMPORTED_MODULE_3__","hostRef","Object","this","prototype","create","options","dismiss","data","role","id","document","getTop","_a"],"mappings":"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","file":"static/js/15.114ecf4f.chunk.js","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { r as registerInstance } from './chunk-f257aad1.js';\nimport './chunk-1074393c.js';\nimport { g as createOverlay, h as dismissOverlay, j as getOverlay } from './chunk-24212d31.js';\n\nvar ActionSheetController =\n/** @class */\nfunction () {\n  function ActionSheetController(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create an action sheet overlay with action sheet options.\n   *\n   * @param options The options to use to create the action sheet.\n   */\n\n\n  ActionSheetController.prototype.create = function (options) {\n    return createOverlay('ion-action-sheet', options);\n  };\n  /**\n   * Dismiss the open action sheet overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the action sheet.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the action sheet.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the action sheet to dismiss. If an id is not provided, it will dismiss the most recently opened action sheet.\n   */\n\n\n  ActionSheetController.prototype.dismiss = function (data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-action-sheet', id);\n  };\n  /**\n   * Get the most recently opened action sheet overlay.\n   */\n\n\n  ActionSheetController.prototype.getTop = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , getOverlay(document, 'ion-action-sheet')];\n      });\n    });\n  };\n\n  return ActionSheetController;\n}();\n\nvar AlertController =\n/** @class */\nfunction () {\n  function AlertController(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create an alert overlay with alert options.\n   *\n   * @param options The options to use to create the alert.\n   */\n\n\n  AlertController.prototype.create = function (options) {\n    return createOverlay('ion-alert', options);\n  };\n  /**\n   * Dismiss the open alert overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the alert.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the alert.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the alert to dismiss. If an id is not provided, it will dismiss the most recently opened alert.\n   */\n\n\n  AlertController.prototype.dismiss = function (data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-alert', id);\n  };\n  /**\n   * Get the most recently opened alert overlay.\n   */\n\n\n  AlertController.prototype.getTop = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , getOverlay(document, 'ion-alert')];\n      });\n    });\n  };\n\n  return AlertController;\n}();\n\nvar LoadingController =\n/** @class */\nfunction () {\n  function LoadingController(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a loading overlay with loading options.\n   *\n   * @param options The options to use to create the loading.\n   */\n\n\n  LoadingController.prototype.create = function (options) {\n    return createOverlay('ion-loading', options);\n  };\n  /**\n   * Dismiss the open loading overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the loading.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the loading.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the loading to dismiss. If an id is not provided, it will dismiss the most recently opened loading.\n   */\n\n\n  LoadingController.prototype.dismiss = function (data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-loading', id);\n  };\n  /**\n   * Get the most recently opened loading overlay.\n   */\n\n\n  LoadingController.prototype.getTop = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , getOverlay(document, 'ion-loading')];\n      });\n    });\n  };\n\n  return LoadingController;\n}();\n\nvar ModalController =\n/** @class */\nfunction () {\n  function ModalController(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a modal overlay with modal options.\n   *\n   * @param options The options to use to create the modal.\n   */\n\n\n  ModalController.prototype.create = function (options) {\n    return createOverlay('ion-modal', options);\n  };\n  /**\n   * Dismiss the open modal overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the modal.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the modal.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the modal to dismiss. If an id is not provided, it will dismiss the most recently opened modal.\n   */\n\n\n  ModalController.prototype.dismiss = function (data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-modal', id);\n  };\n  /**\n   * Get the most recently opened modal overlay.\n   */\n\n\n  ModalController.prototype.getTop = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , getOverlay(document, 'ion-modal')];\n      });\n    });\n  };\n\n  return ModalController;\n}();\n\nvar PickerController =\n/** @class */\nfunction () {\n  function PickerController(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a picker overlay with picker options.\n   *\n   * @param options The options to use to create the picker.\n   */\n\n\n  PickerController.prototype.create = function (options) {\n    return createOverlay('ion-picker', options);\n  };\n  /**\n   * Dismiss the open picker overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the picker.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the picker.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the picker to dismiss. If an id is not provided, it will dismiss the most recently opened picker.\n   */\n\n\n  PickerController.prototype.dismiss = function (data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-picker', id);\n  };\n  /**\n   * Get the most recently opened picker overlay.\n   */\n\n\n  PickerController.prototype.getTop = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , getOverlay(document, 'ion-picker')];\n      });\n    });\n  };\n\n  return PickerController;\n}();\n\nvar PopoverController =\n/** @class */\nfunction () {\n  function PopoverController(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a popover overlay with popover options.\n   *\n   * @param options The options to use to create the popover.\n   */\n\n\n  PopoverController.prototype.create = function (options) {\n    return createOverlay('ion-popover', options);\n  };\n  /**\n   * Dismiss the open popover overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the popover.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the popover.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the popover to dismiss. If an id is not provided, it will dismiss the most recently opened popover.\n   */\n\n\n  PopoverController.prototype.dismiss = function (data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-popover', id);\n  };\n  /**\n   * Get the most recently opened popover overlay.\n   */\n\n\n  PopoverController.prototype.getTop = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , getOverlay(document, 'ion-popover')];\n      });\n    });\n  };\n\n  return PopoverController;\n}();\n\nvar ToastController =\n/** @class */\nfunction () {\n  function ToastController(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a toast overlay with toast options.\n   *\n   * @param options The options to use to create the toast.\n   */\n\n\n  ToastController.prototype.create = function (options) {\n    return createOverlay('ion-toast', options);\n  };\n  /**\n   * Dismiss the open toast overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the toast. For example, 'cancel' or 'backdrop'.\n   * @param id The id of the toast to dismiss. If an id is not provided, it will dismiss the most recently opened toast.\n   */\n\n\n  ToastController.prototype.dismiss = function (data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-toast', id);\n  };\n  /**\n   * Get the most recently opened toast overlay.\n   */\n\n\n  ToastController.prototype.getTop = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , getOverlay(document, 'ion-toast')];\n      });\n    });\n  };\n\n  return ToastController;\n}();\n\nexport { ActionSheetController as ion_action_sheet_controller, AlertController as ion_alert_controller, LoadingController as ion_loading_controller, ModalController as ion_modal_controller, PickerController as ion_picker_controller, PopoverController as ion_popover_controller, ToastController as ion_toast_controller };"],"sourceRoot":""}